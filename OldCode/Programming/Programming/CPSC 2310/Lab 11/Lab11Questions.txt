	# AJ Garner 
	# adgarne
	# Lab section 001 
CPSC 2310 Spring 23
Lab 11 Questions

1. As discussed in the lab writeup, the locations for min and max are 
	-8(%rbq) and -4(%rbq), which are 4 apart. How far apart would these
	addresses be if min and max were chars instead of ints? Why?
	What if they were doubles? 
	(You can test this)
	If they were chars, then the distance would only be 1 byte and if they
	were doubles, then the distance would be 8 bytes.


2. Alter the values assigned to min and max in the driver.s file
	| min | max | result
	=======================
	| 0   | 10  | 0 1 2 3 4 5 6 7 8 9 10
	| 5   | 10  | 0 1 2 3 4 5 6 7 8 9 10
	| 10  | 0   | 0
	| -5  | 1   | 0 1

3. What are these lines doing in driver.s?

	movl  -8(%rbp), %eax # min, tmp89
   	movl  %eax, -12(%rbp)   # tmp89, i

	It is moving 4 bytes from the memory at -8(%rbp) and storing it at the
	register %eax. From there, %eax is then storing into the memory address
	at -12(%rbp).


4. What happens when you change the jump conditional to jl instead of jle?
	What if you change it to jg? Why?
	Changing from jle to jl made the printout not have 10 at the end. This is 
	because when chaning it you are going from <= to just <.
	Changing to jg produced nothing, this means that jg changed the sign to 
	greater than, which will not interate.



5. The last line in .L3 handles the for loop change (i++)
   The third line in .L2  handles the for loop conditional (i < max)
(The first two lines in .L2 handle the initialization, but we won't alter that)
	
Fill in the resulting loop and print out when we change the x86 commands 
(*some of these create infinite loops so testing directly may take awhile, 
try to logic through it first. If there is an infinite loop, write "infinite
loop" as the printout)

	.L3         | .L2  |        for loop             |    printout
===========================================================================
addl  $1, -12(%rbp) | jle  | for(i = min; i <= max; i++) | 0 1 3 4....10
subl  $1, -12(%rbp) | jle  | for(i = min; i <= max; i--) | infinite loop
addl  $2, -12(%rbp) | jl   | for(i = min; i < max; i+=2) | 0 2 4 6 8 10 
mull  $2, -12(%rbp) | jge  | for(i = min;         ;    ) | does not complie 
addl  $1, -8(%rbp)  | jle  | for(i = min; i <= max; i)   | infinite loop


6. lsl r4, r3, #2 is the same as r4 = 4 * r3. Explain
Lsl means logical shift left and the #2 is telling it to shift 2 and in the case
of r4, 4 is saying that r3 will shift by 2 because 4 is 2^2. 

   ldr r5, [r0, r4] is the same as r5 = arr[i] in this case. How does this work?
   r5 is the variable that is storing an element from the array, r0 is the first
   element and r4 is the iterator.



7. In the beginning of a function in ARM, we push lr onto the stack. At the
   end, we pop that value into pc. Why is this important? What does it 
   accomplish?
   We push lr to the stack so we can preserve it to return it later.	
