-First I complile and start the Ocaml program:

aj@AJs-MacBook Asg2 % ocaml                                                            
OCaml version 5.1.0
Enter #help;; for help.

# #use "sde2.caml";;
val first_duplicate_helper : int list -> int list -> int = <fun>
val first_duplicate : int list -> int = <fun>
val first_nonrepeating_helper : int list -> int list -> int = <fun>
val first_nonrepeating : int list -> int = <fun>
val sumOfTwo_check : int -> int list -> int -> bool = <fun>
val sumOfTwo_helper : int list -> int list -> int -> bool = <fun>
val sumOfTwo : int list * int list * int -> bool = <fun>
val take_helper : int -> 'a list -> 'a list -> 'a list = <fun>
val take : int * 'a list -> 'a list = <fun>
val drop_helper : int -> 'a list -> 'a list = <fun>
val drop : int * 'a list -> 'a list = <fun>
val powerset_helper : 'a -> 'a list list -> 'a list list = <fun>
val powerset : 'a list -> 'a list list = <fun>



-Next I will test first_duplicate using examples from the instructions, plus my own tests:

# first_duplicate [1;2;3;4;5;6;7;4;5;8;9];;
- : int = 4
# first_duplicate [1;2;3;4;5;6;7;8;5;2;9];;
- : int = 5
# first_duplicate [1;2;3;4;5;6;7;8;9;10];;
- : int = -10000

-My own tests:
# first_duplicate [1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;15];;
- : int = 15
# first_duplicate [1;2;3;4;5;6;7;8;9;10;11;12;13;14;15];;
- : int = -10000
# first_duplicate [1;2;1;12;3;4;5;6;7;8;9;10];;
- : int = 1


-Next I will test first_nonrepeating using examples from the instructions, plus my own tests:

# first_nonrepeating [1;2;3;2;7;5;6;1;3];;
- : int = 7
# first_nonrepeating [1;2;3;4;5;1;2;3;4;5];;
- : int = -10000
# first_nonrepeating [1;1;1;2;2;2];;
- : int = -10000
# first_nonrepeating [1;2;3;4;5;1;2;3;4;9];;
- : int = 5

-My own tests:
# first_nonrepeating [3;3;4;4;17;17;1;1;1;2;2;2];;
- : int = -10000
# first_nonrepeating [100;200;300;300;200;100;2000];;
- : int = 2000


-Next I will test sumOfTwo using examples from the instructions, plus my own tests:

# sumOfTwo([1;2;3],[10;20;30;40],42);;
- : bool = true
# sumOfTwo([1;2;3],[10;20;30;40],43);;
- : bool = true
# sumOfTwo([1;2;3],[10;20;30;40],44);;
- : bool = false

-My own tests:
# sumOfTwo([3;2;4],[10;20;30;40],44);;
- : bool = true
# sumOfTwo([10;20;30],[10;20;30;40],70);;
- : bool = true


-Next I will test take using examples from the instructions, plus my own tests:

# take (2, [1;2;3;4]);;
- : int list = [1; 2]
# take (-1, [1;2;3;4]);;
- : int list = []
# take (15, [1;2;3;4]);;
- : int list = [1; 2; 3; 4]

-My own tests:
# take (15, [1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19]);;
- : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15]
# take (0, [1;2;3;4]);;
- : int list = []


-Next I will test drop using examples from the instructions, plus my own tests:

# drop (2, [1;2;3;4]);;
- : int list = [3; 4]
# drop (15, [1;2;3;4]);;
- : int list = []
# drop (2,[1;2;3;4;5;6]);;
- : int list = [3; 4; 5; 6]
# drop (0, [1;2;3;4]);;
- : int list = [1; 2; 3; 4]

-My own tests:
# drop (15, [1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19]);;
- : int list = [16; 17; 18; 19]
# drop (10, [1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19]);;
- : int list = [11; 12; 13; 14; 15; 16; 17; 18; 19]


-Finally I will test powerset using examples from the instructions, plus my own tests:

# powerset [1;2;3];;
- : int list list = [[]; [3]; [2]; [2; 3]; [1]; [1; 3]; [1; 2]; [1; 2; 3]]
# powerset [1;2];;
- : int list list = [[]; [2]; [1]; [1; 2]]
# powerset [1;2;3;4];;
- : int list list =
[[]; [4]; [3]; [3; 4]; [2]; [2; 4]; [2; 3]; [2; 3; 4]; [1]; [1; 4]; [1; 3];
 [1; 3; 4]; [1; 2]; [1; 2; 4]; [1; 2; 3]; [1; 2; 3; 4]]

-My own tests:
# powerset [1;20;3;40];;
- : int list list =
[[]; [40]; [3]; [3; 40]; [20]; [20; 40]; [20; 3]; [20; 3; 40]; [1]; [1; 40];
 [1; 3]; [1; 3; 40]; [1; 20]; [1; 20; 40]; [1; 20; 3]; [1; 20; 3; 40]]
# powerset [1];;
- : int list list = [[]; [1]]
# powerset [];;
- : 'a list list = [[]]